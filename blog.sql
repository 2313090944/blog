/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 50721
 Source Host           : 127.0.0.1:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50721
 File Encoding         : 65001

 Date: 22/11/2018 10:59:22
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for abouts
-- ----------------------------
DROP TABLE IF EXISTS `abouts`;
CREATE TABLE `abouts`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标题',
  `preface` varchar(1500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '前言',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of abouts
-- ----------------------------
INSERT INTO `abouts` VALUES (1, '11', '<p>321321</p>', '11<p>3123</p>', NULL, '2018-11-22 01:52:38');

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `preface` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '前言',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `logo` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'logo',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '封面',
  `cover_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '封面图片描述',
  `category_id` int(11) UNSIGNED NULL DEFAULT NULL COMMENT '分类id',
  `is_top` tinyint(255) NULL DEFAULT NULL COMMENT '文章是否置顶',
  `is_show` tinyint(255) UNSIGNED NULL DEFAULT 0 COMMENT '文章是否显示',
  `score` int(10) UNSIGNED NULL DEFAULT 0 COMMENT '排序分值',
  `comment` int(10) UNSIGNED NULL DEFAULT 0 COMMENT '评论数量',
  `created_at` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP(0),
  `updated_at` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP(0),
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES (1, 'Nuxt.js免费视频教程 开启SSR渲染 ( 共10集)', '<p>Nuxt.js简单的说是Vue.js的通用框架，最常用的就是用来作SSR（服务器端渲染）。再直白点说，就是Vue.js原来是开发SPA（单页应用）的，但是随着技术的普及，很多人想用Vue开发多页应用，并在服务端完成渲染。这时候就出现了Nuxt.js这个框架，她简化了SSR的开发难度。还可以直接用命令把我们制作的vue项目生成为静态html。</p>', '<div class=\"entry-content\">\r\n            <div class=\"toc\" style=\"left: 1090px; display: block;\"><ul>\r\n<li><a href=\"#toc-e70\">第00节：课程介绍</a></li>\r\n<li><a href=\"#toc-821\">第01节：Nuxt环境搭建和Hello World</a></li>\r\n<li><a href=\"#toc-f3c\">第02节：Nuxt目录结构详讲</a></li>\r\n<li><a href=\"#toc-d99\">第03节：Nuxt常用配置项</a></li>\r\n<li><a href=\"#toc-d53\">第04节：Nuxt的路由配置和参数传递</a></li>\r\n<li><a href=\"#toc-1f6\">第05节：Nuxt的动态路由和参数校验</a></li>\r\n<li><a href=\"#toc-2a3\">第06节：Nuxt的路由动画效果</a></li>\r\n<li><a href=\"#toc-e35\">第07节：Nuxt的默认模版和默认布局</a></li>\r\n<li><a href=\"#toc-123\">第08节：Nuxt的错误页面和个性meta设置</a></li>\r\n<li><a href=\"#toc-0e7\">第09节：asyncData方法获取数据</a></li>\r\n<li><a href=\"#toc-2a3\">第10节：静态资源和打包</a></li>\r\n</ul>\r\n</div><p>Nuxt.js简单的说是Vue.js的通用框架，最常用的就是用来作SSR（服务器端渲染）。再直白点说，就是Vue.js原来是开发SPA（单页应用）的，但是随着技术的普及，很多人想用Vue开发多页应用，并在服务端完成渲染。这时候就出现了Nuxt.js这个框架，她简化了SSR的开发难度。还可以直接用命令把我们制作的vue项目生成为静态html。</p>\r\n<!--more-->\r\n<h2><a id=\"toc-e70\" class=\"anchor\" href=\"#toc-e70\"></a>第00节：课程介绍</h2>\r\n<p>Nuxt.js简单的说是Vue.js的通用框架，最常用的就是用来作SSR（服务器端渲染）。再直白点说，就是Vue.js原来是开发SPA（单页应用）的，但是随着技术的普及，很多人想用Vue开发多页应用，并在服务端完成渲染。这时候就出现了Nuxt.js这个框架，她简化了SSR的开发难度。还可以直接用命令把我们制作的vue项目生成为静态html。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=o0559lkvhky&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>那服务器端渲染到底有什么好处那？</strong></p>\r\n<p>最主要的原因时SPA（单页应用）不利于搜索引擎的SEO操作。比如你作一个新闻网站，流量的一个主要来源是通过百度、谷歌、bing这些搜索引擎，但是它们对SPA的抓取并不好，特别是百度根本没法抓取到SPA的内容页面，所以我们必须把我们的应用在服务端渲染成适合搜索引擎抓取的页面，再下载到客户端。那Nuxt.js适合作新闻、博客、电影、咨询这样的需要搜索引擎提供流量的项目。如果你要作移动端的项目，就没必要使用这个框架了。（其实Nuxt.js个人觉的是一个解决方案）</p>\r\n<p>如果你是一个Vuer（vue程序员），那不会这个框架，说明你的技能没有全部点亮，那每天用十多分钟，跟着技术胖把这个技能点亮吧。</p>\r\n<p><strong>什么是SSR？</strong></p>\r\n<p>SSR，即服务器渲染，就是在服务器端将对Vue页面进行渲染生成html文件，将html页面传递给浏览器。</p>\r\n<p>SSR两个优点：</p>\r\n<ul>\r\n<li>SEO 不同于SPA的HTML只有一个无实际内容的HTML和一个app.js，SSR生成的HTML是有内容的，这让搜索引擎能够索引到页面内容。</li>\r\n<li>更快内容到达时间 传统的SPA应用是将bundle.js从服务器获取，然后在客户端解析并挂载到dom。而SSR直接将HTML字符串传递给浏览器。大大加快了首屏加载时间。</li>\r\n</ul>\r\n<p>Nuxt.js的官方网站是这样介绍的：</p>\r\n<blockquote>\r\n<p>Nuxt.js 是一个基于 Vue.js 的通用应用框架。\r\n通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI渲染。</p>\r\n</blockquote>\r\n<p>Nuxt.js是特点（优点）：</p>\r\n<ul>\r\n<li>基于 Vue.js</li>\r\n<li>自动代码分层</li>\r\n<li>服务端渲染</li>\r\n<li>强大的路由功能，支持异步数据</li>\r\n<li>静态文件服务</li>\r\n<li>ES6/ES7 语法支持</li>\r\n<li>打包和压缩 JS 和 CSS</li>\r\n<li>HTML头部标签管理</li>\r\n<li>本地开发支持热加载</li>\r\n<li>集成ESLint</li>\r\n<li>支持各种样式预处理器： SASS、LESS、 Stylus等等</li>\r\n</ul>\r\n<p><strong>课程说明:</strong></p>\r\n<p>课程采用文章+视频的形式，你可以先看视频，文章作为你的学习记录，在敲代码或复习时使用。</p>\r\n<p>视频每周更新二到三集（我并不是全职讲师，还是一线敲代码的程序员，只能回家后进行录制）。</p>\r\n<p>本课程全部免费观看，博客也没有任何广告，如果你觉的对你有帮助，希望右侧扫码打赏，以维持小站的生计。</p>\r\n<p><strong>学习所需知识:</strong></p>\r\n<p>熟悉这些知识：HTML+CSS、JavaScript、Vue的基础知识。</p>\r\n<p>如果你已经做过一两个Vue项目那就再好不过了，没有也不用气馁，我会照顾新的小伙伴，放慢编码速度，多作代码解释的。</p>\r\n<h2><a id=\"toc-821\" class=\"anchor\" href=\"#toc-821\"></a>第01节：Nuxt环境搭建和Hello World</h2>\r\n<p>如果你搜到了这门课程，对SSR一定不陌生，在课程介绍里已经简单讲过SSR，我就直接开始说使用Nuxt.js这个框架。这节我们就来安装开发环境和作一个最简单的Hello World出来。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=w05611590b2&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>nuxt.js安装</strong></p>\r\n<p>在使用npm前你需要安装Node到系统中，如果你还不会安装Node，那就不要学这节课了，而是从技术胖的Vue基础课程开始学起吧，等基础都学会了再来学这个也不迟。</p>\r\n<p>1.用npm来安装vue-cli这个框架，如果你已经安装过了，可以省略这步。</p>\r\n<pre><code class=\"hljs lang-avrasm firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>npm install vue-<span class=\"hljs-keyword\">cli</span> -g</li></ul></code></pre><p>这个根据你的网络环境不同，安装的速度不仅相同，如果你的网络环境实在不好，可以考虑使用cnpm来进行安装。（在实际开发中我会尽量避免使用cnpm来进行安装，因为会出现一些未知的错误。）</p>\r\n<p>安装完成后可以使用vue -V 来测试是否安装成功。（注意：这里要使用大写的V，小写无效）。</p>\r\n<p>2.使用vue安装 nuxt</p>\r\n<p>安装好vue-cli后，就可以使用init命令来初始化Nuxt.js项目。</p>\r\n<pre><code class=\"hljs lang-nginx firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-attribute\">vue</span> init nuxt/starter</li></ul></code></pre><p>这时候他会在github上下载模版，然后会询问你项目的名称叫什么，作者什么的，这些完全可以根据自己的爱好填写。</p>\r\n<p>3.使用npm install安装依赖包</p>\r\n<pre><code class=\"hljs lang-cmake firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>npm <span class=\"hljs-keyword\">install</span></li></ul></code></pre><p>这个过程是要等一会的，如果你这个过程安装失败，也不要慌张，你可以直接诶删除项目中的node_modules文件夹后，重新npm install进行安装。</p>\r\n<p>4.使用npm run dev 启动服务</p>\r\n<pre><code class=\"hljs lang-dockerfile firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> dev</span></li></ul></code></pre><p>5.在浏览器输入 localhost:3000,可以看到结果。</p>\r\n<p><strong>Hello World</strong></p>\r\n<p>学程序国际惯例的第一节都是来个Hello World ，我们先来体验一下。</p>\r\n<p>在项目根目录下找到/pages/index.vue文件，让后把项目名称改写成Hello World。框架支持热更新，所以你不用刷新就自动更新了。</p>\r\n<p>（具体操作步骤看视频吧，我就不截图给大家了）</p>\r\n<p>总结：这节课的内容很简单，但是要注意自己的网络环境，安装失败不要气馁，删除node_modules重新进行安装。快动手跟着技术胖做一做吧，不作你是学不会的。</p>\r\n<h2><a id=\"toc-f3c\" class=\"anchor\" href=\"#toc-f3c\"></a>第02节：Nuxt目录结构详讲</h2>\r\n<p>上节课我们已经顺利安装好了开发环境，这节课我们就详细讲解下每个文件夹和文件的用途，并把状态文件作一个详细介绍。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=w0653m1rrce&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>目录结构：</strong></p>\r\n<p>Nuxt自动生产了项目目录，我们先来一个一个介绍一下。</p>\r\n<pre><code class=\"hljs lang-aspectj firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>|-- .nuxt                            <span class=\"hljs-comment\">// Nuxt自动生成，临时的用于编辑的文件，build</span></li><li><span class=\"line-num\" data-line=\"2\"></span>|-- assets                           <span class=\"hljs-comment\">// 用于组织未编译的静态资源入LESS、SASS 或 JavaScript</span></li><li><span class=\"line-num\" data-line=\"3\"></span>|-- components                       <span class=\"hljs-comment\">// 用于自己编写的Vue组件，比如滚动组件，日历组件，分页组件</span></li><li><span class=\"line-num\" data-line=\"4\"></span>|-- layouts                          <span class=\"hljs-comment\">// 布局目录，用于组织应用的布局组件，不可更改。</span></li><li><span class=\"line-num\" data-line=\"5\"></span>|-- middleware                       <span class=\"hljs-comment\">// 用于存放中间件</span></li><li><span class=\"line-num\" data-line=\"6\"></span>|-- pages                            <span class=\"hljs-comment\">// 用于存放写的页面，我们主要的工作区域</span></li><li><span class=\"line-num\" data-line=\"7\"></span>|-- plugins                          <span class=\"hljs-comment\">// 用于存放JavaScript插件的地方</span></li><li><span class=\"line-num\" data-line=\"8\"></span>|-- <span class=\"hljs-keyword\">static</span>                           <span class=\"hljs-comment\">// 用于存放静态资源文件，比如图片</span></li><li><span class=\"line-num\" data-line=\"9\"></span>|-- store                            <span class=\"hljs-comment\">// 用于组织应用的Vuex 状态管理。</span></li><li><span class=\"line-num\" data-line=\"10\"></span>|-- .editorconfig                    <span class=\"hljs-comment\">// 开发工具格式配置</span></li><li><span class=\"line-num\" data-line=\"11\"></span>|-- .eslintrc.js                     <span class=\"hljs-comment\">// ESLint的配置文件，用于检查代码格式</span></li><li><span class=\"line-num\" data-line=\"12\"></span>|-- .gitignore                       <span class=\"hljs-comment\">// 配置git不上传的文件</span></li><li><span class=\"line-num\" data-line=\"13\"></span>|-- nuxt.config.json                 <span class=\"hljs-comment\">// 用于组织Nuxt.js应用的个性化配置，已覆盖默认配置</span></li><li><span class=\"line-num\" data-line=\"14\"></span>|-- <span class=\"hljs-keyword\">package</span>-lock.json                <span class=\"hljs-comment\">// npm自动生成，用于帮助package的统一性设置的，yarn也有相同的操作</span></li><li><span class=\"line-num\" data-line=\"15\"></span>|-- <span class=\"hljs-keyword\">package</span>-lock.json                <span class=\"hljs-comment\">// npm自动生成，用于帮助package的统一性设置的，yarn也有相同的操作</span></li><li><span class=\"line-num\" data-line=\"16\"></span>|-- <span class=\"hljs-keyword\">package</span>.json                     <span class=\"hljs-comment\">// npm包管理配置文件</span></li></ul><b class=\"name\">aspectj</b></code></pre><p><strong>主要文件介绍：</strong></p>\r\n<p>这部分内容我就在视频中讲解了，不作过多的笔记介绍，小伙伴可以看视频学习。</p>\r\n<h2><a id=\"toc-d99\" class=\"anchor\" href=\"#toc-d99\"></a>第03节：Nuxt常用配置项</h2>\r\n<p>已经了解Nuxt生成项目的目录结构后，其实就可以愉快的玩耍了，但是感觉还是收到了很多约束，比如开发时的IP地址和端口（localhost:3000）和公用的CSS，这节课我们就学习一些Nuxt的常用配置，让我们开发的更自由。</p>\r\n<iframe width=\"100%\" frameborder=\"0\" src=\"https://v.qq.com/txp/iframe/player.html?vid=x060068iux8\" allowfullscreen=\"true\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>配置IP和端口：</strong></p>\r\n<p>开发中经常会遇到端口被占用或者指定IP的情况。我们需要在根目录下的package.json里对config项进行配置。比如现在我们想把IP配置成127.0.0.1，端口设置1818。</p>\r\n<p>/package.json</p>\r\n<pre><code class=\"hljs lang-xquery firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-string\">\"config\"</span>:{</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-string\">\"nuxt\"</span>:{</li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-string\">\"host\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,</li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-string\">\"port\"</span>:<span class=\"hljs-string\">\"1818\"</span></li><li><span class=\"line-num\" data-line=\"5\"></span>    }</li><li><span class=\"line-num\" data-line=\"6\"></span>  },</li></ul><b class=\"name\">xquery</b></code></pre><p>配置好后，我们在终端中输入npm run dev，然后你会看到服务地址改为了127.0.0.1:1818.</p>\r\n<p><strong>配置全局CSS</strong></p>\r\n<p>在开发多页项目时，都会定义一个全局的CSS来初始化我们的页面渲染，比如把padding和margin设置成0，网上也有非常出名的开源css文件normailze.css。要定义这些配置，需要在nuxt.config.js里进行操作。</p>\r\n<p>比如现在我们要把页面字体设置为红色，就可以在assets/css/normailze.css文件，然后把字体设置为红色。</p>\r\n<p>/assets/css/normailze.css</p>\r\n<pre><code class=\"hljs lang-css firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-selector-tag\">html</span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-attribute\">color</span>:red;</li><li><span class=\"line-num\" data-line=\"3\"></span>}</li></ul></code></pre><p>/nuxt.config.js</p>\r\n<pre><code class=\"hljs lang-vim firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>  <span class=\"hljs-keyword\">cs</span><span class=\"hljs-variable\">s:</span>[<span class=\"hljs-string\">\'~assets/css/normailze.css\'</span>],</li></ul></code></pre><p>设置好后，在终端输入npm run dev 。然后你会发现字体已经变成了红色。</p>\r\n<p>配置webpack的loader</p>\r\n<p>在nuxt.config.js里是可以对webpack的基本配置进行覆盖的，比如现在我们要配置一个url-loader来进行小图片的64位打包。就可以在nuxt.config.js的build选项里进行配置。</p>\r\n<pre><code class=\"hljs lang-http firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-attribute\">build</span>: {</li><li><span class=\"line-num\" data-line=\"2\"></span></li><li><span class=\"line-num\" data-line=\"3\"></span><span class=\"gradle\">    loaders:[</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      {</li><li><span class=\"line-num\" data-line=\"5\"></span>        test:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,</li><li><span class=\"line-num\" data-line=\"6\"></span>        loader:<span class=\"hljs-string\">\"url-loader\"</span>,</li><li><span class=\"line-num\" data-line=\"7\"></span>        query:{</li><li><span class=\"line-num\" data-line=\"8\"></span>          limit:<span class=\"hljs-number\">10000</span>,</li><li><span class=\"line-num\" data-line=\"9\"></span>          name:<span class=\"hljs-string\">\'img/[name].[hash].[ext]\'</span></li><li><span class=\"line-num\" data-line=\"10\"></span>        }</li><li><span class=\"line-num\" data-line=\"11\"></span>      }</li><li><span class=\"line-num\" data-line=\"12\"></span>    ],</li><li><span class=\"line-num\" data-line=\"13\"></span></li><li><span class=\"line-num\" data-line=\"14\"></span>    <span class=\"hljs-comment\">/*</span></li><li><span class=\"line-num\" data-line=\"15\"></span>    ** Run ESLint on save</li><li><span class=\"line-num\" data-line=\"16\"></span>    */</li><li><span class=\"line-num\" data-line=\"17\"></span>    extend (config, { isDev, isClient }) {</li><li><span class=\"line-num\" data-line=\"18\"></span>      <span class=\"hljs-keyword\">if</span> (isDev &amp;&amp; isClient) {</li><li><span class=\"line-num\" data-line=\"19\"></span>        config.module.rules.<span class=\"hljs-keyword\">push</span>({</li><li><span class=\"line-num\" data-line=\"20\"></span>          enforce: <span class=\"hljs-string\">\'pre\'</span>,</li><li><span class=\"line-num\" data-line=\"21\"></span>          test: <span class=\"hljs-regexp\">/\\.(js|vue)$/</span>,</li><li><span class=\"line-num\" data-line=\"22\"></span>          loader: <span class=\"hljs-string\">\'eslint-loader\'</span>,</li><li><span class=\"line-num\" data-line=\"23\"></span>          <span class=\"hljs-keyword\">exclude</span>: <span class=\"hljs-regexp\">/(node_modules)/</span></li><li><span class=\"line-num\" data-line=\"24\"></span>        })</li><li><span class=\"line-num\" data-line=\"25\"></span>      }</li><li><span class=\"line-num\" data-line=\"26\"></span>    }</li><li><span class=\"line-num\" data-line=\"27\"></span>  }</li></ul><b class=\"name\">http</b></code></pre><p>如果你这个部分看不明白，说明你对webpack还不是很了解，你需要学习一下webpack的课程，技术胖有一套非常好的webpack教程，希望对你有帮助《webpack3.x版 成神之路》共26集。</p>\r\n<p>总结：这节课主要讲了日常开发中最常用的Nuxt.js配置，难度可能是你要对webpack有所掌握，希望小伙伴都能动手做一做这些配置，有问题可以在文章留言区给技术胖留言哦。</p>\r\n<h2><a id=\"toc-d53\" class=\"anchor\" href=\"#toc-d53\"></a>第04节：Nuxt的路由配置和参数传递</h2>\r\n<p>学习前端框架都要学习路由机制，因为路由可以体现我们的业务逻辑，把模块串联起来，让程序焕发光彩。那简单的说路由就是我们的跳转机制，也可以简单理解成链接跳转。Nuxt.js的路由并不复杂，它给我们进行了封装，让我们节省了很多配置环节。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=j0602vdn9i3&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>简单路由Demo</strong></p>\r\n<p>我们现在根目录的pages文件下新建两个文件夹，about和news（模仿关于我们和新闻的功能模块，如果此处不清楚请看视频）。</p>\r\n<p>在about文件夹下新建index.vue文件，并写入下面的代码：</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>About Index page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>在news文件夹下新建index.vue文件，并写入下面的代码：</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>News Index page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>修改原来的pages文件夹下的index.vue，删除没用的代码，写入下面链接代码：</p>\r\n<pre><code class=\"hljs lang-dust firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>HOME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>ABOUT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/news\"</span>&gt;</span>NEWS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"12\"></span></li><li><span class=\"line-num\" data-line=\"13\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-template-variable\">{</span></li><li><span class=\"line-num\" data-line=\"14\"></span>  components: {</li><li><span class=\"line-num\" data-line=\"15\"></span></li><li><span class=\"line-num\" data-line=\"16\"></span>  }<span class=\"xml\"><span class=\"undefined\"></span></span></li><li><span class=\"line-num\" data-line=\"17\"></span>}</li><li><span class=\"line-num\" data-line=\"18\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"19\"></span></li><li><span class=\"line-num\" data-line=\"20\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"undefined\"></span></li><li><span class=\"line-num\" data-line=\"21\"></span></li><li><span class=\"line-num\" data-line=\"22\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></li></ul><b class=\"name\">dust</b></code></pre><p>这个小例子作完，你会发现这一切太简单了，因为Nuxt.js都为我们作好了，不用写任何配置代码。</p>\r\n<p><strong><code>&lt;nuxt-link&gt;</code>标签</strong></p>\r\n<p>虽然上面的例子跳转已经成功，但是Nuxt.js并不推荐这种<code>&lt;a&gt;</code>标签的作法，它为我们准备了<code>&lt;nuxt-link&gt;</code>标签（vue中叫组件）。我们先把首页的<code>&lt;a&gt;</code>标签替换成<code>&lt;nuxt-link&gt;</code>。</p>\r\n<pre><code class=\"hljs lang-dust firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span><span class=\"hljs-template-variable\">{name:\'index\'}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span>HOME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span><span class=\"hljs-template-variable\">{name:\'about\'}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span>ABOUT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span><span class=\"hljs-template-variable\">{name:\'news\'}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span>NEWS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"12\"></span></li><li><span class=\"line-num\" data-line=\"13\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-template-variable\">{</span></li><li><span class=\"line-num\" data-line=\"14\"></span>  components: {</li><li><span class=\"line-num\" data-line=\"15\"></span></li><li><span class=\"line-num\" data-line=\"16\"></span>  }<span class=\"xml\"><span class=\"undefined\"></span></span></li><li><span class=\"line-num\" data-line=\"17\"></span>}</li><li><span class=\"line-num\" data-line=\"18\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"19\"></span></li><li><span class=\"line-num\" data-line=\"20\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"undefined\"></span></li><li><span class=\"line-num\" data-line=\"21\"></span></li><li><span class=\"line-num\" data-line=\"22\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></li></ul><b class=\"name\">dust</b></code></pre><p>我们再次预览页面，也是可以进行正常跳转的，在实际开发中尽量使用<nuxt-link>标签的方法跳转路由。</nuxt-link></p>\r\n<p><strong>params传递参数</strong></p>\r\n<p>路由经常需要传递参数，我们可以简单的使用params来进行传递参数，我们现在向新闻页面（news）传递个参数，然后在新闻页面进行简单的接收。</p>\r\n<p>我们先修改pages下的Index.vue文件，给新闻的跳转加上params参数，传递3306ID。</p>\r\n<pre><code class=\"hljs lang-dust firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span><span class=\"hljs-template-variable\">{name:\'index\'}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span>HOME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span><span class=\"hljs-template-variable\">{name:\'about\'}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"</span>&gt;</span>ABOUT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span><span class=\"hljs-template-variable\">{name:\'news\',params:{newsId:3306}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">}\"</span>&gt;</span>NEWS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"12\"></span></li><li><span class=\"line-num\" data-line=\"13\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-template-variable\">{</span></li><li><span class=\"line-num\" data-line=\"14\"></span>  components: {</li><li><span class=\"line-num\" data-line=\"15\"></span></li><li><span class=\"line-num\" data-line=\"16\"></span>  }<span class=\"xml\"><span class=\"undefined\"></span></span></li><li><span class=\"line-num\" data-line=\"17\"></span>}</li><li><span class=\"line-num\" data-line=\"18\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"19\"></span></li><li><span class=\"line-num\" data-line=\"20\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"undefined\"></span></li><li><span class=\"line-num\" data-line=\"21\"></span></li><li><span class=\"line-num\" data-line=\"22\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></li></ul><b class=\"name\">dust</b></code></pre><p>在news文件夹下的index.vue里用$route.params.newsId进行接收，代码如下。</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>News Index page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>NewsID:<span class=\"hljs-template-variable\">{{$route.params.newsId}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><p>总结：这节简单讲解了一下路由，如果你以前Vue的基础很好，其实学完这节已经可以做出一些赏心悦目的小Demo出来了，那让我们发挥我们的想象力，作个小Demo练手一下把。</p>\r\n<h2><a id=\"toc-1f6\" class=\"anchor\" href=\"#toc-1f6\"></a>第05节：Nuxt的动态路由和参数校验</h2>\r\n<p>简单的路由已经弄清楚了，这节看一下动态路由，其实动态路由就是带参数的路由。比如我们现在新闻模块下面有很多新闻详细页，这时候就需要动态路由的帮助了。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=f0603qztmiy&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>新闻详细页面：</strong>\r\n我在news文件夹下面新建了_id.vue的文件，以下画线为前缀的Vue文件就是动态路由，然后在文件里边有 $route.params.id来接收参数。</p>\r\n<p>/pages/news/_id.vue</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>News-Content [<span class=\"hljs-template-variable\">{{$route.params.id}}</span><span class=\"xml\">]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><p>修改新闻首页路由</p>\r\n<p>我们在/pages/news/index.vue进行修改，增加两个详细页的路由News-1和News-2。</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>News Index page<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>NewsID:<span class=\"hljs-template-variable\">{{$route.params.newsId}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/news/123\"</span>&gt;</span>News-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/news/456\"</span>&gt;</span>News-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><p>代码写好后，打开npm run dev 进行查看，我们已经进入了新闻详细页，并在详细页中取得了传递过来的新闻ID。</p>\r\n<p><strong>动态参数校验</strong></p>\r\n<p>进入一个页面，对参数传递的正确性校验是必须的，Nuxt.js也贴心的为我们准备了校验方法validate( )。</p>\r\n<p>/pages/news/_id.vue</p>\r\n<pre><code class=\"hljs lang-cs firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>export <span class=\"hljs-keyword\">default</span> {</li><li><span class=\"line-num\" data-line=\"2\"></span></li><li><span class=\"line-num\" data-line=\"3\"></span>  validate ({ <span class=\"hljs-keyword\">params</span> }) {</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-comment\">// Must be a number</span></li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-keyword\">return</span> /^\\d+$/.test(<span class=\"hljs-keyword\">params</span>.id)</li><li><span class=\"line-num\" data-line=\"6\"></span>  }</li><li><span class=\"line-num\" data-line=\"7\"></span></li><li><span class=\"line-num\" data-line=\"8\"></span>}</li></ul><b class=\"name\">cs</b></code></pre><p>我们使用了validate方法，并把params传递进去，然后用正则进行了校验，如果正则返回了true正常进入页面，如果返回false进入404页面。</p>\r\n<p><strong>总结：</strong>这节课主要讲解了Nuxt的动态路由，说了动态路由的写法和校验参数功能，希望小伙伴可以进行练习。只有练习才能发现问题，才能学会。技术胖真心希望你能学会这门技术。</p>\r\n<h2><a id=\"toc-2a3\" class=\"anchor\" href=\"#toc-2a3\"></a>第06节：Nuxt的路由动画效果</h2>\r\n<p>路由的动画效果，也叫作页面的更换效果。Nuxt.js提供两种方法为路由提供动画效果，一种是全局的，一种是针对单独页面制作。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=z06040qphkn&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>全局路由动画</strong></p>\r\n<p>全局动画默认使用page来进行设置，例如现在我们为每个页面都设置一个进入和退出时的渐隐渐现的效果。我们可以先在根目录的assets/css下建立一个main.css文件。</p>\r\n<p>/assets/css/main.css(没有请自行建立)</p>\r\n<pre><code class=\"hljs lang-css firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-selector-class\">.page-enter-active</span>, <span class=\"hljs-selector-class\">.page-leave-active</span> {</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">2s</span>;</li><li><span class=\"line-num\" data-line=\"3\"></span>}</li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-selector-class\">.page-enter</span>, <span class=\"hljs-selector-class\">.page-leave-active</span> {</li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</li><li><span class=\"line-num\" data-line=\"6\"></span>}</li></ul><b class=\"name\">css</b></code></pre><p>然后在nuxt.config.js里加入一个全局的css文件就可以了。</p>\r\n<pre><code class=\"hljs lang-vim firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">cs</span><span class=\"hljs-variable\">s:</span>[<span class=\"hljs-string\">\'assets/css/main.css\'</span>],</li></ul></code></pre><p>这时候在页面切换的时候就会有2秒钟的动画切换效果了，但是你会发现一些页面是没有效果的，这是因为你没有是<code>&lt;nuxt-link&gt;</code>组件来制作跳转链接。你需要进行更改。</p>\r\n<p>比如我们上节课作的动态路由新闻页，你就需要改成下面的链接。</p>\r\n<pre><code class=\"hljs lang-dust firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span></span><span class=\"hljs-template-variable\">{name:\'news-id\',params:{id:123}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">}\"</span>&gt;</span>News-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li></ul></code></pre><p>改过之后你就会看到动画效果了。</p>\r\n<p><strong>单独设置页面动效</strong></p>\r\n<p>想给一个页面单独设置特殊的效果时，我们只要在css里改变默认的page，然后在页面组件的配置中加入transition字段即可。例如，我们想给about页面加入一个字体放大然后缩小的效果，其他页面没有这个效果。</p>\r\n<p>在全局样式assets/main.css 中添加以下内容。</p>\r\n<pre><code class=\"hljs lang-css firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-selector-class\">.test-enter-active</span>, <span class=\"hljs-selector-class\">.test-leave-active</span> {</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">12px</span>;</li><li><span class=\"line-num\" data-line=\"4\"></span></li><li><span class=\"line-num\" data-line=\"5\"></span>}</li><li><span class=\"line-num\" data-line=\"6\"></span><span class=\"hljs-selector-class\">.test-enter</span>, <span class=\"hljs-selector-class\">.test-leave-active</span> {</li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;</li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">40px</span>;</li><li><span class=\"line-num\" data-line=\"9\"></span>}</li></ul><b class=\"name\">css</b></code></pre><p>然后在about/index.vue组件中设置</p>\r\n<pre><code class=\"hljs lang-css firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">default</span> {</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-attribute\">transition</span>:<span class=\"hljs-string\">\'test\'</span></li><li><span class=\"line-num\" data-line=\"3\"></span>}</li></ul></code></pre><p>这时候就有了页面的切换独特动效了。</p>\r\n<h2><a id=\"toc-e35\" class=\"anchor\" href=\"#toc-e35\"></a>第07节：Nuxt的默认模版和默认布局</h2>\r\n<p>在开发应用时，经常会用到一些公用的元素，比如网页的标题是一样的，每个页面都是一模一样的标题。这时候我们有两种方法，第一种方法是作一个公用的组件出来，第二种方法是修改默认模版。这两种方法各有利弊，比如公用组件更加灵活，但是每次都需要自己手动引入；模版比较方便，但是只能每个页面都引入。这节课我们就学习一下如何使用Nuxt的默认模版和默认布局功能。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=r06044a6j5r&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>默认模板</strong></p>\r\n<p>Nuxt为我们提供了超简单的默认模版订制方法，只要在根目录下创建一个app.html就可以实现了。现在我们希望每个页面的最上边都加入“JSPang.com  技术胖的博客” 这几个字，我们就可以使用默认模版来完成。</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>   <span class=\"hljs-template-variable\">{{ HEAD }}</span><span class=\"xml\"></span></li><li><span class=\"line-num\" data-line=\"5\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>jspang.com 技术胖的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-template-variable\">{{ APP }}</span><span class=\"xml\"></span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><p>这里的{{ HEAD }}读取的是nuxt.config.js里的信息，{{APP}} 就是我们写的pages文件夹下的主体页面了。需要注意的是HEAD和APP都需要大写，如果小写会报错的。</p>\r\n<p>这里还有一个小坑需要大家注意，就是如果你建立了默认模板后，记得要重启服务器，否则你的显示不会成功；但是默认布局是不用重启服务器的。</p>\r\n<p><strong>默认布局</strong></p>\r\n<p>和默认模板类似的功能还有默认布局，但是从名字上你就可以看出来，默认布局主要针对于页面的统一布局使用。它在位置根目录下的layouts/default.vue。需要注意的是在默认布局里不要加入头部信息，只是关于<code>&lt;template&gt;</code>标签下的内容统一订制。</p>\r\n<p>还是上边的需求，我们在每个页面的最顶部放入“JSPang.com  技术胖的博客” 这几个字，看一下在默认布局里的实现。</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>JSPang.com  技术胖的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt</span>/&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>这里的<code>&lt;nuxt/&gt;</code>就相当于我们每个页面的内容，你也可以把一些通用样式放入这个默认布局里，但是个人不建议这样写，会增加页面的复杂程度。</p>\r\n<p>总结：要区分默认模版和默认布局的区别，模版可以订制很多头部信息，包括IE版本的判断；模版只能定制<code>&lt;template&gt;</code>里的内容，跟布局有关系。在工作中修改时要看情况来编写代码。</p>\r\n<h2><a id=\"toc-123\" class=\"anchor\" href=\"#toc-123\"></a>第08节：Nuxt的错误页面和个性meta设置</h2>\r\n<p>当用户输入路由错误的时候，我们需要给他一个明确的指引，所以说在应用程序开发中404页面是必不可少的。Nuxt.js支持直接在默认布局文件夹里建立错误页面。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=p06069cczbj&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>建立错误页面</strong></p>\r\n<p>在根目录下的layouts文件夹下建立一个error.vue文件，它相当于一个显示应用错误的组件。</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"error.statusCode==404\"</span>&gt;</span>404页面不存在<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>500服务器错误<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>HOME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"12\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {</li><li><span class=\"line-num\" data-line=\"13\"></span>  <span class=\"hljs-attr\">props</span>:[<span class=\"hljs-string\">\'error\'</span>],</li><li><span class=\"line-num\" data-line=\"14\"></span>}</li><li><span class=\"line-num\" data-line=\"15\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>代码用v-if进行判断错误类型，需要注意的是这个错误是你需要在<code>&lt;script&gt;</code>里进行声明的，如果不声明程序是找不到error.statusCode的。</p>\r\n<p>这里我也用了一个<code>&lt;nuxt-link&gt;</code>的简单写法直接跟上路径就可以了。</p>\r\n<p><strong>个性meta设置</strong></p>\r\n<p>页面的Meta对于SEO的设置非常重要，比如你现在要作个新闻页面，那为了搜索引擎对新闻的收录，需要每个页面对新闻都有不同的title和meta设置。直接使用head方法来设置当前页面的头部信息就可以了。我们现在要把New-1这个页面设置成个性的meta和title。</p>\r\n<p>1.我们先把<code>pages/news/index.vue</code>页面的链接进行修改一下，传入一个title，目的是为了在新闻具体页面进行接收title，形成文章的标题。</p>\r\n<p>/pages/news/index.vue</p>\r\n<pre><code class=\"hljs lang-dust firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"</span></span></span><span class=\"hljs-template-variable\">{name:\'news-id\',params:{id:123,title:\'jspang.com\'}</span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">}\"</span>&gt;</span>News-1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></li></ul></code></pre><p>2.第一步完成后，我们修改/pages/news/_id.vue，让它根据传递值变成独特的meta和title标签。</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>News-Content [<span class=\"hljs-template-variable\">{{$route.params.id}}</span><span class=\"xml\">]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"10\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {</li><li><span class=\"line-num\" data-line=\"11\"></span></li><li><span class=\"line-num\" data-line=\"12\"></span>  validate ({ params }) {</li><li><span class=\"line-num\" data-line=\"13\"></span>    <span class=\"hljs-comment\">// Must be a number</span></li><li><span class=\"line-num\" data-line=\"14\"></span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-regexp\">/^\\d+$/</span>.test(params.id)</li><li><span class=\"line-num\" data-line=\"15\"></span>  },</li><li><span class=\"line-num\" data-line=\"16\"></span>  data(){</li><li><span class=\"line-num\" data-line=\"17\"></span>    <span class=\"hljs-keyword\">return</span>{</li><li><span class=\"line-num\" data-line=\"18\"></span>      <span class=\"hljs-attr\">title</span>:<span class=\"hljs-keyword\">this</span>.$route.params.title,</li><li><span class=\"line-num\" data-line=\"19\"></span>    }</li><li><span class=\"line-num\" data-line=\"20\"></span>  },</li><li><span class=\"line-num\" data-line=\"21\"></span><span class=\"hljs-comment\">//独立设置head信息</span></li><li><span class=\"line-num\" data-line=\"22\"></span>  head(){</li><li><span class=\"line-num\" data-line=\"23\"></span>      <span class=\"hljs-keyword\">return</span>{</li><li><span class=\"line-num\" data-line=\"24\"></span>        <span class=\"hljs-attr\">title</span>:<span class=\"hljs-keyword\">this</span>.title,</li><li><span class=\"line-num\" data-line=\"25\"></span>        <span class=\"hljs-attr\">meta</span>:[</li><li><span class=\"line-num\" data-line=\"26\"></span>          {<span class=\"hljs-attr\">hid</span>:<span class=\"hljs-string\">\'description\'</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'news\'</span>,<span class=\"hljs-attr\">content</span>:<span class=\"hljs-string\">\'This is news page\'</span>}</li><li><span class=\"line-num\" data-line=\"27\"></span>        ]</li><li><span class=\"line-num\" data-line=\"28\"></span>      }</li><li><span class=\"line-num\" data-line=\"29\"></span>    }</li><li><span class=\"line-num\" data-line=\"30\"></span>}</li><li><span class=\"line-num\" data-line=\"31\"></span></li><li><span class=\"line-num\" data-line=\"32\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><p>注意：为了避免子组件中的meta标签不能正确覆盖父组件中相同的标签而产生重复的现象，建议利用 hid 键为meta标签配一个唯一的标识编号。</p>\r\n<h2><a id=\"toc-0e7\" class=\"anchor\" href=\"#toc-0e7\"></a>第09节：asyncData方法获取数据</h2>\r\n<p>在项目中需要在初始化页面前先得到数据，也就是我们常说的异步请求数据。Nuxt.js贴心的为我们扩展了Vue.js的方法，增加了anyncData。从名字上就很好理解，这是一个一部的方法。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=j0607huiqnz&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>创建远程数据</strong></p>\r\n<p>在这里制作一些假的远程数据，我选择的网站是myjson.com，它是一个json的简单仓库，学习使用是非常适合的。\r\n我们打开网站，在对话空中输入JSON代码，这个代码可以自己随意输入哦。</p>\r\n<pre><code class=\"hljs lang-json firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"JSPang\"</span>,</li><li><span class=\"line-num\" data-line=\"3\"></span>  <span class=\"hljs-attr\">\"age\"</span>: <span class=\"hljs-number\">18</span>,</li><li><span class=\"line-num\" data-line=\"4\"></span>  <span class=\"hljs-attr\">\"interest\"</span>: <span class=\"hljs-string\">\"I love coding!\"</span></li><li><span class=\"line-num\" data-line=\"5\"></span>}</li></ul><b class=\"name\">json</b></code></pre><p>输入后，网站会给你一个地址，这就是你这个JSON仓库的地址了。\r\n<code>https://api.myjson.com/bins/8gdmr</code></p>\r\n<p><strong>安装Axios</strong></p>\r\n<p>Vue.js官方推荐使用的远程数据获取方式就Axios，所以我们安装官方推荐，来使用Axios。这里我们使用npm 来安装 axios。\r\n直接在终端中输入下面的命令：</p>\r\n<p><code>npm install axios --save</code></p>\r\n<p><strong>ansycData的promise方法</strong></p>\r\n<p>我们在pages下面新建一个文件，叫做ansyData.vue。</p>\r\n<p>然后写入下面的代码：</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>姓名：<span class=\"hljs-template-variable\">{{info.name}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>年龄：<span class=\"hljs-template-variable\">{{info.age}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>兴趣：<span class=\"hljs-template-variable\">{{info.interest}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"6\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'axios\'</span></li><li><span class=\"line-num\" data-line=\"10\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {</li><li><span class=\"line-num\" data-line=\"11\"></span>  data(){</li><li><span class=\"line-num\" data-line=\"12\"></span>     <span class=\"hljs-keyword\">return</span> {</li><li><span class=\"line-num\" data-line=\"13\"></span>         <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'hello World\'</span>,</li><li><span class=\"line-num\" data-line=\"14\"></span>     }</li><li><span class=\"line-num\" data-line=\"15\"></span>  },</li><li><span class=\"line-num\" data-line=\"16\"></span>  asyncData(){</li><li><span class=\"line-num\" data-line=\"17\"></span>      <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">\'https://api.myjson.com/bins/8gdmr\'</span>)</li><li><span class=\"line-num\" data-line=\"18\"></span>      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>{</li><li><span class=\"line-num\" data-line=\"19\"></span>          <span class=\"hljs-built_in\">console</span>.log(res)</li><li><span class=\"line-num\" data-line=\"20\"></span>          <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">info</span>:res.data}</li><li><span class=\"line-num\" data-line=\"21\"></span>      })</li><li><span class=\"line-num\" data-line=\"22\"></span></li><li><span class=\"line-num\" data-line=\"23\"></span>  }</li><li><span class=\"line-num\" data-line=\"24\"></span>}</li><li><span class=\"line-num\" data-line=\"25\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><p>这时候我们可以看到，浏览器中已经能输出结果了。</p>\r\n<p><strong>ansycData的await方法</strong></p>\r\n<p>当然上面的方法稍显过时，现在都在用ansyc…await来解决异步,改写上面的代码。</p>\r\n<pre><code class=\"hljs lang-django firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>姓名：<span class=\"hljs-template-variable\">{{info.name}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>年龄：<span class=\"hljs-template-variable\">{{info.age}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>兴趣：<span class=\"hljs-template-variable\">{{info.interest}}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"6\"></span></li><li><span class=\"line-num\" data-line=\"7\"></span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-keyword\">import</span> axios <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'axios\'</span></li><li><span class=\"line-num\" data-line=\"12\"></span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {</li><li><span class=\"line-num\" data-line=\"13\"></span>  data(){</li><li><span class=\"line-num\" data-line=\"14\"></span>     <span class=\"hljs-keyword\">return</span> {</li><li><span class=\"line-num\" data-line=\"15\"></span>         <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'hello World\'</span>,</li><li><span class=\"line-num\" data-line=\"16\"></span>     }</li><li><span class=\"line-num\" data-line=\"17\"></span>  },</li><li><span class=\"line-num\" data-line=\"18\"></span>  <span class=\"hljs-keyword\">async</span> asyncData(){</li><li><span class=\"line-num\" data-line=\"19\"></span>      <span class=\"hljs-keyword\">let</span> {data}=<span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">\'https://api.myjson.com/bins/8gdmr\'</span>)</li><li><span class=\"line-num\" data-line=\"20\"></span>      <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">info</span>: data}</li><li><span class=\"line-num\" data-line=\"21\"></span></li><li><span class=\"line-num\" data-line=\"22\"></span>  }</li><li><span class=\"line-num\" data-line=\"23\"></span>}</li><li><span class=\"line-num\" data-line=\"24\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li></ul><b class=\"name\">django</b></code></pre><h2><a id=\"toc-2a3\" class=\"anchor\" href=\"#toc-2a3\"></a>第10节：静态资源和打包</h2>\r\n<p>出差了一个星期，终于又回来了，可以继续给小伙伴们录课了。有一些小伙伴给我留言，说一些图片在项目开发时可用，但是打包后就不可用了，这节课就讲一下Nuxt.js项目中如何放置静态资源和打包。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=l06127encjl&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>直接引入图片</strong></p>\r\n<p>我们在网上任意下载一个图片，放到项目中的static文件夹下面，然后可以使用下面的引入方法进行引用</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"~static/logo.png\"</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li></ul></code></pre><p>这种引用方法是不用估计相对路径的，“~”就相当于定位到了项目跟目录，这时候你的图片路径就不会出现错误，就算打包也是正常的。</p>\r\n<p><strong>CSS引入图片</strong></p>\r\n<p>如果在CSS中引入图片，方法和html中直接引入是一样的，也是用“~”符号引入。</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"></span></li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-selector-class\">.diss</span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;</li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'~static/logo.png\'</span>)</li><li><span class=\"line-num\" data-line=\"6\"></span>  }</li><li><span class=\"line-num\" data-line=\"7\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>这时候在npm run dev 下是完全正常的，那我们看一下打包。</p>\r\n<p><strong>打包静态HTML并运行</strong></p>\r\n<p>用Nuxt.js制作完成后，你可以打包成静态文件并放在服务器上，进行运行。</p>\r\n<p>在终端中输入：</p>\r\n<pre><code class=\"hljs lang-verilog firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>npm run <span class=\"hljs-keyword\">generate</span></li></ul></code></pre><p>然后在dist文件夹下输入live-server就可以了。</p>\r\n<p>总结：Nuxt.js框架非常简单，因为大部分的事情他都为我们做好了，我们只要安装它的规则来编写代码。我相信小伙伴通过10节课的学习，已经可以做出自己想要的效果了，Nuxt.js这个技能树也算点亮了。期待更多实用课程，我们下套课程见了。</p>\r\n\r\n        </div>', NULL, 'http://jspang.com/static/upload/20181111/G-wj-ZQuocWlYOHM6MT2Hbh5.jpg', '封面', 2, 1, 1, 1, 1, '2018-11-20 11:14:47', '2018-11-20 03:14:47');
INSERT INTO `blog` VALUES (2, 'React免费视频教程-表单的应用 (共4集)', ' <p>在前端与用户发生最多的交互行为都产生在表单里，在React中表单组件不同于其他组件，因为它们会缓存用户的录入信息和录入状态，由此也带来了React对表单处理的一些特殊性。你是不是经常会在学习或者React中对于使用表单有所疑惑，有很多小伙伴会陷入表单的坑中，并走不出来。技术胖专门写一篇文章来讲述React中表单的使用。</p>\r\n<p>在学习这节课之前，你必须学习我的上一套课程《React入门与组件》 。</p>\r\n', '<div class=\"entry-content\">\r\n            <div class=\"toc\" style=\"left: 1090px; display: block;\"><ul>\r\n<li><a href=\"#toc-8cf\">第1节：表单的事件响应和bind复用</a></li>\r\n<li><a href=\"#toc-671\">第2节：React表单name复用</a></li>\r\n<li><a href=\"#toc-2a0\">第3节：React表单-可控组件</a></li>\r\n<li><a href=\"#toc-faa\">第4节：React表单-不可控组件</a></li>\r\n</ul>\r\n</div><p>在前端与用户发生最多的交互行为都产生在表单里，在React中表单组件不同于其他组件，因为它们会缓存用户的录入信息和录入状态，由此也带来了React对表单处理的一些特殊性。你是不是经常会在学习或者React中对于使用表单有所疑惑，有很多小伙伴会陷入表单的坑中，并走不出来。技术胖专门写一篇文章来讲述React中表单的使用。</p>\r\n<p>在学习这节课之前，你必须学习我的上一套课程《React入门与组件》 。</p>\r\n<!--more-->\r\n<h2><a id=\"toc-8cf\" class=\"anchor\" href=\"#toc-8cf\"></a>第1节：表单的事件响应和bind复用</h2>\r\n<p>事件响应\r\n表单组件可以通过设置<code>onChange()</code>回调函数来监听组件变化。当用户的交互行文导致一下变化时，<code>onChange()</code>被执行并通过浏览器做出响应。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=f0547xaf9nj&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<ul>\r\n<li><code>&lt;input&gt;</code>或<code>&lt;textarea&gt;</code>的<code>value</code>发生变化。</li>\r\n<li><code>&lt;input&gt;</code>的<code>checked</code>状态改变。</li>\r\n<li><code>&lt;option&gt;</code>的<code>selected</code> 状态改变。\r\nbind复用\r\nbind方法为事件相应函数增加一个参数，事件响应函数通过该参数识别事件源。</li>\r\n</ul>\r\n<p>我们作一个文本框，并使用bind进行复用，我希望你自己可以亲自动手敲一下代码，加深对bind复用的理解。</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span></li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>React-props<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./common/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./common/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://cdn.bootcss.com/babel-core/5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"12\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"13\"></span></li><li><span class=\"line-num\" data-line=\"14\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"15\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"16\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span><span class=\"actionscript\"></span></li><li><span class=\"line-num\" data-line=\"17\"></span>       <span class=\"hljs-keyword\">var</span>  MyForm = React.createClass({</li><li><span class=\"line-num\" data-line=\"18\"></span>           getInitialState:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{</li><li><span class=\"line-num\" data-line=\"19\"></span>            <span class=\"hljs-keyword\">return</span>{</li><li><span class=\"line-num\" data-line=\"20\"></span>                username:<span class=\"hljs-string\">\'\'</span>,</li><li><span class=\"line-num\" data-line=\"21\"></span>                gender:<span class=\"hljs-string\">\'man\'</span>,</li><li><span class=\"line-num\" data-line=\"22\"></span>                checked:<span class=\"hljs-literal\">true</span></li><li><span class=\"line-num\" data-line=\"23\"></span>            }</li><li><span class=\"line-num\" data-line=\"24\"></span>           },</li><li><span class=\"line-num\" data-line=\"25\"></span>           handleChange:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(name,event)</span></span>{</li><li><span class=\"line-num\" data-line=\"26\"></span>                <span class=\"hljs-keyword\">var</span> newState={};</li><li><span class=\"line-num\" data-line=\"27\"></span>                newState[name]=name==<span class=\"hljs-string\">\"checked\"</span>?event.target.checked:event.target.value;</li><li><span class=\"line-num\" data-line=\"28\"></span>                <span class=\"hljs-keyword\">this</span>.setState(newState);</li><li><span class=\"line-num\" data-line=\"29\"></span>                console.log(newState);</li><li><span class=\"line-num\" data-line=\"30\"></span>           },</li><li><span class=\"line-num\" data-line=\"31\"></span>           submitHandler:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(e)</span></span>{</li><li><span class=\"line-num\" data-line=\"32\"></span>               e.preventDefault();</li><li><span class=\"line-num\" data-line=\"33\"></span>               <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">is</span> = <span class=\"hljs-keyword\">this</span>.state.checked?<span class=\"hljs-string\">\'是\'</span>:<span class=\"hljs-string\">\'不是\'</span>;</li><li><span class=\"line-num\" data-line=\"34\"></span>               <span class=\"hljs-keyword\">var</span> gender= <span class=\"hljs-keyword\">this</span>.state.gender == <span class=\"hljs-string\">\"man\"</span> ? <span class=\"hljs-string\">\"帅哥\"</span>:<span class=\"hljs-string\">\"美女\"</span>;</li><li><span class=\"line-num\" data-line=\"35\"></span>               alert(<span class=\"hljs-keyword\">this</span>.state.username+ <span class=\"hljs-keyword\">is</span> + gender +<span class=\"hljs-string\">\'.\'</span> );</li><li><span class=\"line-num\" data-line=\"36\"></span>           },</li><li><span class=\"line-num\" data-line=\"37\"></span>           render:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{</li><li><span class=\"line-num\" data-line=\"38\"></span>               <span class=\"hljs-keyword\">return</span> (&lt;form onSubmit={<span class=\"hljs-keyword\">this</span>.submitHandler}&gt;</li><li><span class=\"line-num\" data-line=\"39\"></span>               &lt;label htmlFor=<span class=\"hljs-string\">\"username\"</span>&gt;情输入您的姓名：&lt;/label&gt;</li><li><span class=\"line-num\" data-line=\"40\"></span>               &lt;input type=<span class=\"hljs-string\">\"text\"</span> name=<span class=\"hljs-string\">\"username\"</span> onChange={<span class=\"hljs-keyword\">this</span>.handleChange.bind(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">\"username\"</span>)} value={<span class=\"hljs-keyword\">this</span>.state.username} id=<span class=\"hljs-string\">\"username\"</span> /&gt;</li><li><span class=\"line-num\" data-line=\"41\"></span>               &lt;br/&gt;</li><li><span class=\"line-num\" data-line=\"42\"></span>               &lt;label htmlFor=<span class=\"hljs-string\">\"checkbox\"</span>&gt;是或否：&lt;/label&gt;</li><li><span class=\"line-num\" data-line=\"43\"></span>               &lt;input  type=<span class=\"hljs-string\">\"checkbox\"</span> value=<span class=\"hljs-string\">\"是否\"</span> name=<span class=\"hljs-string\">\"checked\"</span> id=<span class=\"hljs-string\">\"checkbox\"</span> onChange={<span class=\"hljs-keyword\">this</span>.handleChange.bind(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">\"checked\"</span>)} checked={<span class=\"hljs-keyword\">this</span>.state.checked} /&gt;</li><li><span class=\"line-num\" data-line=\"44\"></span>               &lt;br/&gt;</li><li><span class=\"line-num\" data-line=\"45\"></span>               &lt;label htmlFor=<span class=\"hljs-string\">\"username\"</span>&gt;请选择&lt;/label&gt;</li><li><span class=\"line-num\" data-line=\"46\"></span>               &lt;select name=<span class=\"hljs-string\">\"gender\"</span> onChange={<span class=\"hljs-keyword\">this</span>.handleChange.bind(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">\"gender\"</span>)} value={<span class=\"hljs-keyword\">this</span>.state.gender}&gt;</li><li><span class=\"line-num\" data-line=\"47\"></span>                    &lt;option value=<span class=\"hljs-string\">\"man\"</span>&gt;帅哥&lt;/option&gt;</li><li><span class=\"line-num\" data-line=\"48\"></span>                    &lt;option value=<span class=\"hljs-string\">\"woman\"</span>&gt;美女&lt;/option&gt;</li><li><span class=\"line-num\" data-line=\"49\"></span>               &lt;/select&gt;</li><li><span class=\"line-num\" data-line=\"50\"></span>               &lt;br/&gt;</li><li><span class=\"line-num\" data-line=\"51\"></span>               &lt;button type=<span class=\"hljs-string\">\"submit\"</span>&gt;提交&lt;/button&gt;</li><li><span class=\"line-num\" data-line=\"52\"></span>               &lt;/form&gt;)</li><li><span class=\"line-num\" data-line=\"53\"></span>           }</li><li><span class=\"line-num\" data-line=\"54\"></span>       });</li><li><span class=\"line-num\" data-line=\"55\"></span></li><li><span class=\"line-num\" data-line=\"56\"></span></li><li><span class=\"line-num\" data-line=\"57\"></span>       ReactDOM.render(&lt;MyForm/&gt;,document.getElementById(<span class=\"hljs-string\">\'demo\'</span>))</li><li><span class=\"line-num\" data-line=\"58\"></span></li><li><span class=\"line-num\" data-line=\"59\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"60\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"61\"></span></li><li><span class=\"line-num\" data-line=\"62\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>上边的代码精髓就在handleChange里边，所以一定要注意里边的写法，因为在React中这非常常用。</p>\r\n<pre><code class=\"hljs lang-haxe firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span>handleChange:<span class=\"hljs-type\">function</span>(name,event){</li><li><span class=\"line-num\" data-line=\"2\"></span>                <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">State</span>={};</li><li><span class=\"line-num\" data-line=\"3\"></span>                <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">State</span>[name]=name==<span class=\"hljs-string\">\"checked\"</span>?event.target.checked:<span class=\"hljs-type\">event</span>.target.value;</li><li><span class=\"line-num\" data-line=\"4\"></span>                <span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">State</span>);</li><li><span class=\"line-num\" data-line=\"5\"></span>                console.log(<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">State</span>);</li><li><span class=\"line-num\" data-line=\"6\"></span>           },</li></ul><b class=\"name\">haxe</b></code></pre><p>另外需要注意的是在<label>标签里的for不能在正常使用了，而是要写成htmlFor。</label></p>\r\n<h2><a id=\"toc-671\" class=\"anchor\" href=\"#toc-671\"></a>第2节：React表单name复用</h2>\r\n<blockquote>\r\n<p>name复用方式直接读取表单的属性值，比bind写法少一个参数（React中事件响应函数会自动绑定this）。其原理是在所有的标签中设置统一的name属性，并将这个属性值对应为state属性，在事件响应函数中通过读取表单的name值获得state属性，从event.target.value获取用户输入的值（check控件稍有不同），要求所有相关的标签（包括input标签）都要统一设置name属性。–引用《React前端技术与工程实践》</p>\r\n</blockquote>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=u0548sppiw8&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p>也许你会对上边的话不理解，其实这种方法看起来更简单，就是每个标签加一个name，然后判断name来进行state的更改。但是我不建议这样使用，因为为每个标签增加一个name属性值并不友好。下面我们修改昨天的代码把bind复用形式改为name复用形式。</p>\r\n<p>其实改的就几个点：改变handleChange的方法，然后改变触发方法，直接写成this.handleChange。</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span></li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>React-props<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./common/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./common/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://cdn.bootcss.com/babel-core/5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"12\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"13\"></span></li><li><span class=\"line-num\" data-line=\"14\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"15\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"16\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span><span class=\"actionscript\"></span></li><li><span class=\"line-num\" data-line=\"17\"></span>       <span class=\"hljs-keyword\">var</span>  MyForm = React.createClass({</li><li><span class=\"line-num\" data-line=\"18\"></span>           getInitialState:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{</li><li><span class=\"line-num\" data-line=\"19\"></span>            <span class=\"hljs-keyword\">return</span>{</li><li><span class=\"line-num\" data-line=\"20\"></span>                username:<span class=\"hljs-string\">\'\'</span>,</li><li><span class=\"line-num\" data-line=\"21\"></span>                gender:<span class=\"hljs-string\">\'man\'</span>,</li><li><span class=\"line-num\" data-line=\"22\"></span>                checked:<span class=\"hljs-literal\">true</span></li><li><span class=\"line-num\" data-line=\"23\"></span>            }</li><li><span class=\"line-num\" data-line=\"24\"></span>           },</li><li><span class=\"line-num\" data-line=\"25\"></span>           handleChange:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(event)</span></span>{</li><li><span class=\"line-num\" data-line=\"26\"></span>                <span class=\"hljs-keyword\">var</span> newState={};</li><li><span class=\"line-num\" data-line=\"27\"></span>                newState[event.target.name]=event.target.name==<span class=\"hljs-string\">\"checked\"</span>?event.target.checked:event.target.value;</li><li><span class=\"line-num\" data-line=\"28\"></span>                <span class=\"hljs-keyword\">this</span>.setState(newState);</li><li><span class=\"line-num\" data-line=\"29\"></span>                console.log(newState);</li><li><span class=\"line-num\" data-line=\"30\"></span>           },</li><li><span class=\"line-num\" data-line=\"31\"></span>           submitHandler:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{</li><li><span class=\"line-num\" data-line=\"32\"></span>               e.preventDefault();</li><li><span class=\"line-num\" data-line=\"33\"></span>               <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">is</span> = <span class=\"hljs-keyword\">this</span>.state.checked?<span class=\"hljs-string\">\'是\'</span>:<span class=\"hljs-string\">\'不是\'</span>;</li><li><span class=\"line-num\" data-line=\"34\"></span>               <span class=\"hljs-keyword\">var</span> gender= <span class=\"hljs-keyword\">this</span>.state.gender == <span class=\"hljs-string\">\"man\"</span> ? <span class=\"hljs-string\">\"帅哥\"</span>:<span class=\"hljs-string\">\"美女\"</span>;</li><li><span class=\"line-num\" data-line=\"35\"></span>               alert(<span class=\"hljs-keyword\">this</span>.state.username+ <span class=\"hljs-keyword\">is</span> + gender +<span class=\"hljs-string\">\'.\'</span> );</li><li><span class=\"line-num\" data-line=\"36\"></span>           },</li><li><span class=\"line-num\" data-line=\"37\"></span>           render:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{</li><li><span class=\"line-num\" data-line=\"38\"></span>               <span class=\"hljs-keyword\">return</span> (&lt;form onSubmit={<span class=\"hljs-keyword\">this</span>.submitHandler}&gt;</li><li><span class=\"line-num\" data-line=\"39\"></span>               &lt;label htmlFor=<span class=\"hljs-string\">\"username\"</span>&gt;情输入您的姓名：&lt;/label&gt;</li><li><span class=\"line-num\" data-line=\"40\"></span>               &lt;input type=<span class=\"hljs-string\">\"text\"</span> name=<span class=\"hljs-string\">\"username\"</span> onChange={<span class=\"hljs-keyword\">this</span>.handleChange} value={<span class=\"hljs-keyword\">this</span>.state.username} id=<span class=\"hljs-string\">\"username\"</span> /&gt;</li><li><span class=\"line-num\" data-line=\"41\"></span>               &lt;br/&gt;</li><li><span class=\"line-num\" data-line=\"42\"></span>               &lt;label htmlFor=<span class=\"hljs-string\">\"checkbox\"</span>&gt;是或否：&lt;/label&gt;</li><li><span class=\"line-num\" data-line=\"43\"></span>               &lt;input  type=<span class=\"hljs-string\">\"checkbox\"</span> value=<span class=\"hljs-string\">\"是否\"</span> name=<span class=\"hljs-string\">\"checked\"</span> id=<span class=\"hljs-string\">\"checkbox\"</span> onChange={<span class=\"hljs-keyword\">this</span>.handleChange} checked={<span class=\"hljs-keyword\">this</span>.state.checked} /&gt;</li><li><span class=\"line-num\" data-line=\"44\"></span>               &lt;br/&gt;</li><li><span class=\"line-num\" data-line=\"45\"></span>               &lt;label htmlFor=<span class=\"hljs-string\">\"username\"</span>&gt;请选择&lt;/label&gt;</li><li><span class=\"line-num\" data-line=\"46\"></span>               &lt;select name=<span class=\"hljs-string\">\"gender\"</span> onChange={<span class=\"hljs-keyword\">this</span>.handleChange} value={<span class=\"hljs-keyword\">this</span>.state.gender}&gt;</li><li><span class=\"line-num\" data-line=\"47\"></span>                    &lt;option value=<span class=\"hljs-string\">\"man\"</span>&gt;帅哥&lt;/option&gt;</li><li><span class=\"line-num\" data-line=\"48\"></span>                    &lt;option value=<span class=\"hljs-string\">\"woman\"</span>&gt;美女&lt;/option&gt;</li><li><span class=\"line-num\" data-line=\"49\"></span>               &lt;/select&gt;</li><li><span class=\"line-num\" data-line=\"50\"></span>               &lt;br/&gt;</li><li><span class=\"line-num\" data-line=\"51\"></span>               &lt;button type=<span class=\"hljs-string\">\"submit\"</span>&gt;提交&lt;/button&gt;</li><li><span class=\"line-num\" data-line=\"52\"></span>               &lt;/form&gt;)</li><li><span class=\"line-num\" data-line=\"53\"></span>           }</li><li><span class=\"line-num\" data-line=\"54\"></span>       });</li><li><span class=\"line-num\" data-line=\"55\"></span></li><li><span class=\"line-num\" data-line=\"56\"></span></li><li><span class=\"line-num\" data-line=\"57\"></span>       ReactDOM.render(&lt;MyForm/&gt;,document.getElementById(<span class=\"hljs-string\">\'demo\'</span>))</li><li><span class=\"line-num\" data-line=\"58\"></span></li><li><span class=\"line-num\" data-line=\"59\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"60\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"61\"></span></li><li><span class=\"line-num\" data-line=\"62\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>通过两节课的学习，我们可以了解两种表单的操作方式，这两种方式尽量掌握，个人感觉第一种在项目中用的多一些。</p>\r\n<h2><a id=\"toc-2a0\" class=\"anchor\" href=\"#toc-2a0\"></a>第3节：React表单-可控组件</h2>\r\n<p><strong>可控组件和不可控组件：</strong></p>\r\n<p>在React中的input标签是有些小坑的，input本身就有自己的缓存机制，然后React的State也有缓存机制。这两种缓存机制我们在编码中是要进行取舍的。将input中的value绑定到state的React组件就是可控组件，反之则是不可控组件。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=h0548yqk6uo&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p><strong>可控组件：</strong></p>\r\n<p>在render()函数中设置了value的<input>是一个功能受限的组件，渲染出来的HTML元素始终保持value属性的值，即使用户输入也不会改变。</p>\r\n<pre><code class=\"hljs lang-javascript firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">var</span>  MyForm = React.createClass({</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>        <span class=\"hljs-keyword\">return</span>(</li><li><span class=\"line-num\" data-line=\"4\"></span>            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"jspang\"</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>        )</li><li><span class=\"line-num\" data-line=\"8\"></span>    }</li><li><span class=\"line-num\" data-line=\"9\"></span>});</li></ul><b class=\"name\">javascript</b></code></pre><p>这时候你在浏览器中打开的Jspang的值是不可变的，甚至连删除都删除不了，这是由React的渲染策略决定的。如果要写成功能正常和可用性组件，我们需要编写onChange事件，并将value绑定到state中。</p>\r\n<pre><code class=\"hljs lang-xml firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"3\"></span></li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"ie=edge\"</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>React-props<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./common/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./common/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://cdn.bootcss.com/babel-core/5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"12\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"13\"></span></li><li><span class=\"line-num\" data-line=\"14\"></span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"15\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"demo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"16\"></span>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span></li><li><span class=\"line-num\" data-line=\"17\"></span>        <span class=\"hljs-keyword\">var</span>  MyForm = React.createClass({</li><li><span class=\"line-num\" data-line=\"18\"></span>            <span class=\"hljs-attr\">getInitialState</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"19\"></span>                <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">\'jspang\'</span>}</li><li><span class=\"line-num\" data-line=\"20\"></span>            },</li><li><span class=\"line-num\" data-line=\"21\"></span>            <span class=\"hljs-attr\">handleChange</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>)</span>{</li><li><span class=\"line-num\" data-line=\"22\"></span>                <span class=\"hljs-keyword\">this</span>.setState({<span class=\"hljs-attr\">value</span>:event.target.value});</li><li><span class=\"line-num\" data-line=\"23\"></span>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.state.value)</li><li><span class=\"line-num\" data-line=\"24\"></span>            },</li><li><span class=\"line-num\" data-line=\"25\"></span>            <span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"26\"></span>                <span class=\"hljs-keyword\">return</span>(</li><li><span class=\"line-num\" data-line=\"27\"></span>                    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"28\"></span>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.value}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleChange}</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"29\"></span>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"30\"></span>                )</li><li><span class=\"line-num\" data-line=\"31\"></span>            }</li><li><span class=\"line-num\" data-line=\"32\"></span>        });</li><li><span class=\"line-num\" data-line=\"33\"></span></li><li><span class=\"line-num\" data-line=\"34\"></span></li><li><span class=\"line-num\" data-line=\"35\"></span>       ReactDOM.render(<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyForm</span>/&gt;</span>,document.getElementById(\'demo\'))</li><li><span class=\"line-num\" data-line=\"36\"></span></li><li><span class=\"line-num\" data-line=\"37\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"38\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"39\"></span></li><li><span class=\"line-num\" data-line=\"40\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></li></ul><b class=\"name\">xml</b></code></pre><p>在情况允许的条件下，我们应该优先考虑编写可控组件。</p>\r\n<p>可控组件的有点：</p>\r\n<ul>\r\n<li>符合React单向数据流特性，即从state流向render输出的结果。</li>\r\n<li>数据存储在state中，便于访问和处理。</li>\r\n</ul>\r\n<h2><a id=\"toc-faa\" class=\"anchor\" href=\"#toc-faa\"></a>第4节：React表单-不可控组件</h2>\r\n<p>在input标签中不把value绑定到state上的就是不可控组件，它的数据不合state对应，所以在开发时会给自己挖很多坑，但是不可控组件并不是不可掌控，就用一节课的时间，我们了解一下不可控组件的小技巧。</p>\r\n<iframe frameborder=\"0\" width=\"100%\" src=\"https://v.qq.com/iframe/player.html?vid=j0548v121jo&amp;tiny=0&amp;auto=0\" allowfullscreen=\"\" style=\"width: 680px; height: 490px;\"></iframe>\r\n\r\n<p>我们先来做一个最简单的不可用组件。</p>\r\n<pre><code class=\"hljs lang-javascript firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">var</span>  MyForm = React.createClass({</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>        <span class=\"hljs-keyword\">return</span>(</li><li><span class=\"line-num\" data-line=\"4\"></span>            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"5\"></span>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span>/&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>        )</li><li><span class=\"line-num\" data-line=\"8\"></span>    }</li><li><span class=\"line-num\" data-line=\"9\"></span>});</li></ul><b class=\"name\">javascript</b></code></pre><p>组件完成之后给它加上一个onChange事件，发现是可以监控到变化值的。如果要获得iput中的value值，需先拿到其DOM节点，然后获取其value值。</p>\r\n<pre><code class=\"hljs lang-javascript firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">var</span>  MyForm = React.createClass({</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-attr\">handleChange</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>        <span class=\"hljs-keyword\">var</span> inputValue=ReactDOM.findDOMNode(<span class=\"hljs-keyword\">this</span>.refs.jspang).value;</li><li><span class=\"line-num\" data-line=\"4\"></span>        <span class=\"hljs-built_in\">console</span>.log(inputValue);</li><li><span class=\"line-num\" data-line=\"5\"></span>    },</li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-attr\">render</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"7\"></span>        <span class=\"hljs-keyword\">return</span>(</li><li><span class=\"line-num\" data-line=\"8\"></span>            <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"9\"></span>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{this.handleChange}</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"jspang\"</span>/&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span>        )</li><li><span class=\"line-num\" data-line=\"12\"></span>    }</li><li><span class=\"line-num\" data-line=\"13\"></span>});</li></ul><b class=\"name\">javascript</b></code></pre><p>当然我们也可以给input加入默认值，但是不是value了，而是defaultValue。</p>\r\n<pre><code class=\"hljs lang-routeros firekylin-code\"><ul><li><span class=\"line-num\" data-line=\"1\"></span> &lt;input <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">\"text\"</span> onChange={this.handleChange} <span class=\"hljs-attribute\">ref</span>=<span class=\"hljs-string\">\"jspang\"</span> <span class=\"hljs-attribute\">defaultValue</span>=<span class=\"hljs-string\">\'jspang\'</span>/&gt;</li></ul></code></pre>\r\n        </div>', NULL, 'http://jspang.com/static/upload/20181015/hvCIWlUzc3OEMWtXPWJlrI2W.jpg', NULL, 2, 1, 1, 1, 1, '2018-11-17 16:34:04', '2018-11-17 16:34:04');
INSERT INTO `blog` VALUES (3, 'hc', NULL, 'hcccccccc', NULL, NULL, NULL, 1, NULL, 0, NULL, NULL, '2018-11-17 16:33:57', '2018-11-17 16:33:57');
INSERT INTO `blog` VALUES (4, 'zxx', NULL, 'zxy', NULL, NULL, NULL, 1, NULL, 0, NULL, NULL, '2018-11-17 16:33:58', '2018-11-17 16:33:58');
INSERT INTO `blog` VALUES (5, 'yz', '<p>test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>', '<p>test1</p>', NULL, 'cover/15426815562714.jpg', NULL, 3, 1, 1, 100, NULL, '2018-11-20 11:11:18', '2018-11-20 03:11:18');
INSERT INTO `blog` VALUES (6, 'test VUE', '<p>安达市多所</p>', '<p>大萨达撒</p>', NULL, 'cover/1542696458646.png', NULL, 1, 1, 1, 1, NULL, '2018-11-20 06:47:47', '2018-11-20 06:47:47');
INSERT INTO `blog` VALUES (8, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, '2018-11-21 08:21:21', '2018-11-21 08:21:21');

-- ----------------------------
-- Table structure for blog_tag
-- ----------------------------
DROP TABLE IF EXISTS `blog_tag`;
CREATE TABLE `blog_tag`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `blog_id` int(10) UNSIGNED NOT NULL,
  `tag_id` int(10) UNSIGNED NOT NULL,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 61 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Fixed;

-- ----------------------------
-- Records of blog_tag
-- ----------------------------
INSERT INTO `blog_tag` VALUES (54, 1, 24, '2018-11-20 03:14:47', '2018-11-20 03:14:47');
INSERT INTO `blog_tag` VALUES (53, 1, 23, '2018-11-20 03:14:47', '2018-11-20 03:14:47');
INSERT INTO `blog_tag` VALUES (48, 5, 19, '2018-11-20 03:13:33', '2018-11-20 03:13:33');
INSERT INTO `blog_tag` VALUES (47, 5, 17, '2018-11-20 03:13:33', '2018-11-20 03:13:33');
INSERT INTO `blog_tag` VALUES (46, 5, 4, '2018-11-20 03:13:33', '2018-11-20 03:13:33');
INSERT INTO `blog_tag` VALUES (55, 1, 25, '2018-11-20 03:14:47', '2018-11-20 03:14:47');
INSERT INTO `blog_tag` VALUES (56, 6, 1, '2018-11-20 06:53:17', '2018-11-20 06:53:17');
INSERT INTO `blog_tag` VALUES (57, 6, 2, '2018-11-20 06:53:17', '2018-11-20 06:53:17');
INSERT INTO `blog_tag` VALUES (58, 7, 4, '2018-11-20 06:53:48', '2018-11-20 06:53:48');
INSERT INTO `blog_tag` VALUES (59, 7, 8, '2018-11-20 06:53:48', '2018-11-20 06:53:48');
INSERT INTO `blog_tag` VALUES (60, 7, 9, '2018-11-20 06:53:48', '2018-11-20 06:53:48');

-- ----------------------------
-- Table structure for categorys
-- ----------------------------
DROP TABLE IF EXISTS `categorys`;
CREATE TABLE `categorys`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `cate_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `pid` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '0',
  `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '-0-',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of categorys
-- ----------------------------
INSERT INTO `categorys` VALUES (1, '前端', '0', '-0-', '2018-11-17 09:24:55', '2018-11-17 09:24:58');
INSERT INTO `categorys` VALUES (2, '后端', '0', '-0-', '2018-11-17 09:25:06', '2018-11-17 09:25:04');
INSERT INTO `categorys` VALUES (3, '生活', '0', '-0-', '2018-11-17 09:25:16', '2018-11-17 09:25:19');
INSERT INTO `categorys` VALUES (5, 'test', '0', '-0-', '2018-11-21 09:27:40', '2018-11-21 09:27:40');

-- ----------------------------
-- Table structure for friends
-- ----------------------------
DROP TABLE IF EXISTS `friends`;
CREATE TABLE `friends`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标题',
  `preface` varchar(1500) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '前言',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '内容',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of friends
-- ----------------------------
INSERT INTO `friends` VALUES (1, '11', '11<p>31231</p>', '11<p>312321</p>', NULL, '2018-11-22 01:48:40');

-- ----------------------------
-- Table structure for migrations
-- ----------------------------
DROP TABLE IF EXISTS `migrations`;
CREATE TABLE `migrations`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 12 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of migrations
-- ----------------------------
INSERT INTO `migrations` VALUES (1, '2018_11_16_153429_create_recommends_table', 1);
INSERT INTO `migrations` VALUES (4, '2018_11_17_010725_create_notices_table', 2);
INSERT INTO `migrations` VALUES (5, '2018_11_17_012157_create_categorys_table', 3);
INSERT INTO `migrations` VALUES (7, '2018_11_17_064752_create_tags_table', 4);
INSERT INTO `migrations` VALUES (8, '2018_11_17_070324_create_system_table', 5);
INSERT INTO `migrations` VALUES (9, '2018_11_17_084437_create_blog_tag_table', 5);
INSERT INTO `migrations` VALUES (10, '2018_11_22_005054_create_abouts_table', 6);
INSERT INTO `migrations` VALUES (11, '2018_11_22_013004_create_friends_table', 7);

-- ----------------------------
-- Table structure for notices
-- ----------------------------
DROP TABLE IF EXISTS `notices`;
CREATE TABLE `notices`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '通知标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '公告内容',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 3 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of notices
-- ----------------------------
INSERT INTO `notices` VALUES (1, '扫码加微信公众号\r\n', '<div style=\"display:flex;\">\r\n                <div style=\"padding:5px;text-align:center;\">\r\n                  <img src=\"http://jspang.com/static/img/wechat_logo.jpg\" width=\"90px\" style=\"border-radius:3px\">\r\n                </div>\r\n                <div class=\"wechat-list\">\r\n                  <ul>\r\n                    <li>及时得更新消息。</li>\r\n                    <li>手机观看更方便。</li>\r\n                    <li>社区问答解忧愁。</li>\r\n                    <li>扫一扫不再迷路。</li>\r\n                  </ul>\r\n              </div>\r\n            </div>', '2018-11-17 09:17:31', '2018-11-17 09:17:28');

-- ----------------------------
-- Table structure for recommends
-- ----------------------------
DROP TABLE IF EXISTS `recommends`;
CREATE TABLE `recommends`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '推荐名称',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '封面图片',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '链接地址',
  `is_show` tinyint(255) UNSIGNED NOT NULL DEFAULT 1 COMMENT '是否显示',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 8 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of recommends
-- ----------------------------
INSERT INTO `recommends` VALUES (1, '免费教程', 'http://jspang.com/static/myimg/blog_guanggao1.png', 'http://www.baidu.com', 1, '2018-11-16 23:38:33', '2018-11-16 23:38:35');
INSERT INTO `recommends` VALUES (2, '实战', 'http://jspang.com/static/myimg/blog_guanggao2.png', 'http://www.baidu.com', 1, '2018-11-16 23:41:51', '2018-11-16 23:41:53');
INSERT INTO `recommends` VALUES (3, 'Webpack', 'http://jspang.com/static/myimg/blog_guanggao3.png', 'http://www.baidu.com', 1, '2018-11-16 23:42:24', '2018-11-21 13:22:39');

-- ----------------------------
-- Table structure for system
-- ----------------------------
DROP TABLE IF EXISTS `system`;
CREATE TABLE `system`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Fixed;

-- ----------------------------
-- Table structure for tags
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '标签名称',
  `count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '文章数量',
  `created_at` timestamp(0) NULL DEFAULT NULL,
  `updated_at` timestamp(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 28 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tags
-- ----------------------------
INSERT INTO `tags` VALUES (1, '前端', 0, '2018-11-17 14:55:11', '2018-11-21 08:29:26');
INSERT INTO `tags` VALUES (2, 'Vue', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (3, 'Nuxt', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (4, 'Laravel', 0, '2018-11-15 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (5, 'ThinkPHP', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (6, 'Yii', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (7, 'Swoole', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (8, '后端', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (9, 'PHP', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (10, 'JavaScript', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (11, 'Jquery', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (12, 'Mysql', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (13, 'SEO', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (14, 'Docker', 0, '2018-11-15 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (15, 'Websocket', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (16, 'MVC', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (17, 'Webpack', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (18, 'Element-ui', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (19, 'Layui', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (20, 'BootStrap', 0, '2018-11-15 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (21, 'Node.js', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (22, 'Composer', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (23, 'Linux', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (24, 'Ubuntu', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');
INSERT INTO `tags` VALUES (25, 'Centos', 0, '2018-11-17 14:55:11', '2018-11-17 14:55:11');

SET FOREIGN_KEY_CHECKS = 1;
